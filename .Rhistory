oSCR.fit.cs
m.nlm
library(oSCR)
data(rbs)
sf <- rbs$scrFrame
ss <- rbs$ssDF
#m.optim <- oSCR.fit.cs(scrFrame = sf, ssDF = ss, start.vals = st, trimS=3)
m.nlm <- oSCR.fit(list(~session,~session,~session,~1),scrFrame = sf, ssDF = ss, start.vals = st, trimS=4)
m.nlm
m.nlm$rawOutput
m.optim
edit(oSCR.fit.cs)
#m.optim <- oSCR.fit.cs(list(~session,~session,~session,~1),scrFrame = sf, ssDF = ss, start.vals = st, trimS=4)
m.optim <- oSCR.fit.cs(list(~session,~session,~session,~1),scrFrame = sf, ssDF = ss, start.vals = st, trimS=4)
m.optim
m.optimH <- oSCR.fit.cs(list(~session,~session,~session,~1),scrFrame = sf, hessian=T, ssDF = ss, start.vals = st, trimS=4)
m.optimH
m.nlm
m.optimH$rawOutput
eigen(m.optimH$rawOutput)$value
eigen(m.optimH$rawOutput$hessian)$value
eigen(m.nlm$rawOutput$hessian)$value
m.nlm$rawOutput$
m.nlm$rawOutput
m.optim$rawOutput
m.optimH$rawOutput
st <- m.nlm$rawOutput$estimate
st
m.optim <- oSCR.fit.cs(list(~session,~session,~session,~1),scrFrame = sf, hessian=T, ssDF = ss, start.vals = st, trimS=4)
m.optim
m.optim <- oSCR.fit(list(~session,~session,~session,~1),scrFrame = sf, hessian=T, ssDF = ss, start.vals = st, trimS=4)
m.optim
m.optim$rawOutput
st
st <- rnorm(length(st),st,0.001)
st
st <- rnorm(length(st),st,0.01)
st
m.optim <- oSCR.fit(list(~session,~session,~session,~1),scrFrame = sf, hessian=T, ssDF = ss, start.vals = st, trimS=4)
m.optim
m.optim$rawOutput
m.optim
m.nlm <- oSCR.fit.cs(list(~session,~session,~session,~1),scrFrame = sf, hessian=T, ssDF = ss, start.vals = st, trimS=4)
edit(oSCR.fit.cs)
sf
str(sf)
library(oSCR)
prompt(make.scrFrame())
prompt(make.scrFrame
prompt(make.scrFrame)
getwd()
?oSCR.fit
rbs$scrFrame$trapOperation
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
rbs$scrFrame$trapCovs
class(rbs$scrFrame$trapCovs)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
trapCovs
sapply(trapCovs,is.data.frame)
sapply(trapCovs,function(x)sapply(x,is.data.frame))
all(sapply(trapCovs,function(x)sapply(x,is.data.frame)))
sapply(trapCovs,is.data.frame)
sapply(trapCovs,is.list)
if(any(!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame)))))
stop("trapCovs must be a list of dataframes")
library(oSCR)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
#must have caphist and traps
if(any(is.null(caphist),is.null(traps)))
stop("caphist and trap must be provided")
#caphist
if(!is.list(caphist))
stop("caphist must be a list")
n.sessions <- length(caphist)
caphist.dimensions <- sapply(caphist,dim)
if(nrow(caphist.dimensions)==2)
caphist.dimensions <- rbind(caphist.dimensions,1)
for(i in 1:n.sessions){
caphist[[i]] <- array(caphist[[i]], dim=caphist.dimensions[,i])
all.zero <- apply(apply(caphist[[i]],c(1,3),sum),1,sum)
if(any(all.zero==0))
stop("At least one individual has an all-zero encounter history")
}
#indCovs
if(!is.null(indCovs)){
if(!is.list(indCovs))
stop("indCovs must be a list")
if(any(!sapply(indCovs,is.data.frame)))
stop("indCovs must be a list of dataframes")
if(length(indCovs) != length(caphist))
stop("number of sessions in indCovs does not match capphist")
check.dim <- sapply(indCovs,nrow)
if(check.dim!=caphist.dimensions[1,])
stop("number of individuals in indCovs does not match caphist")
if(check.dim!=caphist.dimensions[1,])
stop("number of individuals in indCovs does not match caphist")
}
#traps
if(!is.list(traps))
stop("traps must be a list")
if(any(!sapply(traps,is.data.frame)))
stop("traps must be a list of dataframes")
if(length(traps)!=length(caphist))
stop("number of sessions in traps does not match caphist")
check.dim <- sapply(traps,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
#trapCovs
if(!is.null(trapCovs)){
if(!is.list(trapCovs))
stop("trapCovs must be a list")
if(any(!sapply(trapCovs,is.list)))
stop("trapCovs must be a list of lists")
if(any(!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame)))))
stop("trapCovs must be a list of dataframes")
if(length(trapCovs) != length(caphist))
stop("number of sessions in trapCovs does not match capphist")
check.dim <- sapply(trapCovs,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
}
#trapOperation
if(!is.null(trapOperation)){
if(!is.list(trapOperation))
stop("trapOperation must be a list")
if(any(!sapply(trapOperation,is.data.frame)))
stop("trapOperation must be a list of dataframes")
if(length(trapOperation) != length(caphist))
stop("number of sessions in trapOperation does not match capphist")
check.dim <- sapply(trapOperation,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
}
#mean maximum distance moved
max.dist <- NULL
for (i in 1:length(caphist)) {
for (j in 1:nrow(caphist[[i]])) {
where <- apply(caphist[[i]][j, , ], 1, sum) > 0
if (sum(where) > 1)
max.dist <- c(max.dist, max(0, dist(traps[[i]][where, c("X", "Y")]), na.rm = T))
}
}
mmdm <- mean(max.dist[max.dist > 0], na.rm = T)
caphist.dimensions
scrFrame <- list("caphist" = caphist,
"traps" = traps,
"indCovs" = indCovs,
"trapCovs" = trapCovs,
"trapOperation" = trapOperation,
"occasions" = caphist.dimensions[3,],
"type" = type,
"mmdm" = mmdm)
trapOperation <- NULL
indCovs <- NULL
scrFrame <- list("caphist" = caphist,
"traps" = traps,
"indCovs" = indCovs,
"trapCovs" = trapCovs,
"trapOperation" = trapOperation,
"occasions" = caphist.dimensions[3,],
"type" = type,
"mmdm" = mmdm)
type <- "scr"
scrFrame <- list("caphist" = caphist,
"traps" = traps,
"indCovs" = indCovs,
"trapCovs" = trapCovs,
"trapOperation" = trapOperation,
"occasions" = caphist.dimensions[3,],
"type" = type,
"mmdm" = mmdm)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
ls()
library(oSCR)
data(rbs)
sf <- rbs$scrFrame
ss <- rbs$ssDF
m.optim <- oSCR.fit.cs(scrFrame = sf, ssDF = ss)
m.nlm <- oSCR.fit(scrFrame = sf, ssDF = ss)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
is.list(trapCovs)
#trapCovs
if(!is.null(trapCovs)){
if(!is.list(trapCovs))
stop("trapCovs must be a list")
if(any(!sapply(trapCovs,is.list)))
stop("trapCovs must be a list of lists")
if(any(!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame)))))
stop("trapCovs must be a list of dataframes")
if(length(trapCovs) != length(caphist))
stop("number of sessions in trapCovs does not match capphist")
check.dim <- sapply(trapCovs,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
}
make.scrFrame <- function(caphist, traps, indCovs=NULL,
trapCovs=NULL, trapOperation=NULL, type="scr"){
#must have caphist and traps
if(any(is.null(caphist),is.null(traps)))
stop("caphist and trap must be provided")
#caphist
if(!is.list(caphist))
stop("caphist must be a list")
n.sessions <- length(caphist)
caphist.dimensions <- sapply(caphist,dim)
if(nrow(caphist.dimensions)==2)
caphist.dimensions <- rbind(caphist.dimensions,1)
for(i in 1:n.sessions){
caphist[[i]] <- array(caphist[[i]], dim=caphist.dimensions[,i])
all.zero <- apply(apply(caphist[[i]],c(1,3),sum),1,sum)
if(any(all.zero==0))
stop("At least one individual has an all-zero encounter history")
}
#indCovs
if(!is.null(indCovs)){
if(!is.list(indCovs))
stop("indCovs must be a list")
if(any(!sapply(indCovs,is.data.frame)))
stop("indCovs must be a list of dataframes")
if(length(indCovs) != length(caphist))
stop("number of sessions in indCovs does not match capphist")
check.dim <- sapply(indCovs,nrow)
if(check.dim!=caphist.dimensions[1,])
stop("number of individuals in indCovs does not match caphist")
if(check.dim!=caphist.dimensions[1,])
stop("number of individuals in indCovs does not match caphist")
}
#traps
if(!is.list(traps))
stop("traps must be a list")
if(any(!sapply(traps,is.data.frame)))
stop("traps must be a list of dataframes")
if(length(traps)!=length(caphist))
stop("number of sessions in traps does not match caphist")
check.dim <- sapply(traps,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
#trapCovs
if(!is.null(trapCovs)){
if(!is.list(trapCovs))
stop("trapCovs must be a list")
if(any(!sapply(trapCovs,is.list)))
stop("trapCovs must be a list of lists")
if(any(!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame)))))
stop("trapCovs must be a list of dataframes")
if(length(trapCovs) != length(caphist))
stop("number of sessions in trapCovs does not match capphist")
check.dim <- sapply(trapCovs,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
}
#trapOperation
if(!is.null(trapOperation)){
if(!is.list(trapOperation))
stop("trapOperation must be a list")
if(any(!sapply(trapOperation,is.data.frame)))
stop("trapOperation must be a list of dataframes")
if(length(trapOperation) != length(caphist))
stop("number of sessions in trapOperation does not match capphist")
check.dim <- sapply(trapOperation,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
}
#mean maximum distance moved
max.dist <- NULL
for (i in 1:length(caphist)) {
for (j in 1:nrow(caphist[[i]])) {
where <- apply(caphist[[i]][j, , ], 1, sum) > 0
if (sum(where) > 1)
max.dist <- c(max.dist, max(0, dist(traps[[i]][where, c("X", "Y")]), na.rm = T))
}
}
mmdm <- mean(max.dist[max.dist > 0], na.rm = T)
scrFrame <- list("caphist" = caphist,
"traps" = traps,
"indCovs" = indCovs,
"trapCovs" = trapCovs,
"trapOperation" = trapOperation,
"occasions" = caphist.dimensions[3,],
"type" = type,
"mmdm" = mmdm)
class(scrFrame) <- "scrFrame"
return(scrFrame)
}
make.scrFrame(caphist,traps)
make.scrFrame(caphist,traps)
library(oSCR)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, type = "scr")
sf
if(any(!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame)))))
print(1)
unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame))
)
!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame))
)
sapply(trapCovs,nrow)
sapply(trapCovs,function(x)sapply(x,nrow)))
sapply(trapCovs,function(x)sapply(x,nrow))
library(oSCR)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, type = "scr")
sf
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
check.dim[[i]]
i <-
1
check.dim[[i]]
check.dim <- sapply(trapCovs,nrow)
check.dim[[1]]
check.dim
library(oSCR)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
#must have caphist and traps
if(any(is.null(caphist),is.null(traps)))
stop("caphist and trap must be provided")
#caphist
if(!is.list(caphist))
stop("caphist must be a list")
n.sessions <- length(caphist)
caphist.dimensions <- sapply(caphist,dim)
if(nrow(caphist.dimensions)==2)
caphist.dimensions <- rbind(caphist.dimensions,1)
for(i in 1:n.sessions){
caphist[[i]] <- array(caphist[[i]], dim=caphist.dimensions[,i])
all.zero <- apply(apply(caphist[[i]],c(1,3),sum),1,sum)
if(any(all.zero==0))
stop("At least one individual has an all-zero encounter history")
}
#indCovs
if(!is.null(indCovs)){
if(!is.list(indCovs))
stop("indCovs must be a list")
if(any(!sapply(indCovs,is.data.frame)))
stop("indCovs must be a list of dataframes")
if(length(indCovs) != length(caphist))
stop("number of sessions in indCovs does not match capphist")
check.dim <- sapply(indCovs,nrow)
if(check.dim!=caphist.dimensions[1,])
stop("number of individuals in indCovs does not match caphist")
if(check.dim!=caphist.dimensions[1,])
stop("number of individuals in indCovs does not match caphist")
}
#traps
if(!is.list(traps))
stop("traps must be a list")
if(any(!sapply(traps,is.data.frame)))
stop("traps must be a list of dataframes")
if(length(traps)!=length(caphist))
stop("number of sessions in traps does not match caphist")
check.dim <- sapply(traps,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
#trapCovs
if(!is.null(trapCovs)){
if(!is.list(trapCovs))
stop("trapCovs must be a list")
if(any(!sapply(trapCovs,is.list)))
stop("trapCovs must be a list of lists")
if(any(!unlist(sapply(trapCovs,function(x)sapply(x,is.data.frame)))))
stop("trapCovs must be a list of dataframes")
if(length(trapCovs) != length(caphist))
stop("number of sessions in trapCovs does not match capphist")
check.dim <- sapply(trapCovs,function(x)sapply(x,nrow))
for(i in 1:length(check.dim)){
if(all(check.dim[[i]]!=caphist.dimensions[2,i]))
stop("number of traps does not match caphist")
}
}
#trapOperation
if(!is.null(trapOperation)){
if(!is.list(trapOperation))
stop("trapOperation must be a list")
if(any(!sapply(trapOperation,is.data.frame)))
stop("trapOperation must be a list of dataframes")
if(length(trapOperation) != length(caphist))
stop("number of sessions in trapOperation does not match capphist")
check.dim <- sapply(trapOperation,nrow)
if(all(check.dim!=caphist.dimensions[2,]))
stop("number of traps does not match caphist")
}
#mean maximum distance moved
max.dist <- NULL
for (i in 1:length(caphist)) {
for (j in 1:nrow(caphist[[i]])) {
where <- apply(caphist[[i]][j, , ], 1, sum) > 0
if (sum(where) > 1)
max.dist <- c(max.dist, max(0, dist(traps[[i]][where, c("X", "Y")]), na.rm = T))
}
}
mmdm <- mean(max.dist[max.dist > 0], na.rm = T)
check.dim <- sapply(trapCovs,function(x)sapply(x,nrow))
check.dim
length(check.dim)
check.dim[[1]]
check.dim[[1]] != caphist.dimensions[2,i]
all(check.dim[[1]] != caphist.dimensions[2,i])
all(check.dim[[1]] == caphist.dimensions[2,i])
!all(check.dim[[1]] == caphist.dimensions[2,i])
scrFrame <- list("caphist" = caphist,
"traps" = traps,
"indCovs" = indCovs,
"trapCovs" = trapCovs,
"trapOperation" = trapOperation,
"occasions" = caphist.dimensions[3,],
"type" = type,
"mmdm" = mmdm)
library(oSCR)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
traps
?prompt
library(unmarked)
?occu
?occu
?pcount
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
ss <- rbs$ssDF
starts <- c(-2.9, -0.051, -0.920)
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
m0 <- oSCR.fit(model = list(~1,~1,~1,~1), scrFrame = sf, trimS = 4, start.vals = starts)
m0
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
ss <- rbs$ssDF
starts <- c(-2.9, -0.051, -0.920)
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
m0 <- oSCR.fit(model = list(~1,~1,~1,~1), scrFrame = sf, ssDF = ss, trimS = 4, start.vals = starts)
m0
?ocu
?occu
library(oSCR)
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
sf
data(rbs)
caphist <- rbs$scrFrame$caphist
traps <- rbs$scrFrame$traps
trapCovs <- rbs$scrFrame$trapCovs
ss <- rbs$ssDF
starts <- c(-2.9, -0.051, -0.920)
sf <- make.scrFrame(caphist = caphist, traps = traps, trapCovs = trapCovs, type = "scr")
m0 <- oSCR.fit(model = list(~1,~1,~1,~1), scrFrame = sf, ssDF = ss, trimS = 4, start.vals = starts)
m0
